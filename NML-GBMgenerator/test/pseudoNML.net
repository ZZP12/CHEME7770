// pseudo input file
// react
p_proteinA reacted [];
[] reacting m_DHT;
p_a, p_b and p_c reacted [];
    ==> means: p_a reacted [];
               p_b reacted [];
               p_c reacted [];
    not means: (p_a, p_b and p_c) complex and then reacted;
[] reacted p_a, p_b and p_c;
    ==> means: [] reacted p_a;
               [] reacted p_b;
               [] reacted p_c;
// other forms of biological symbol mean almost nothing for "react" type.
// a decomposer for a type --> too silly. can only remind that other forms are not encouraged.


// activate: here, parentheses mean function or being functioned together.
p_A, p_B and p_C activate the expression of (p_D & p_E); #?possible?
    ==> p_A activate the expression of (p_D & p_E);
        p_B activate the expression of (p_D & p_E);
        p_C activate the expression of (p_D & p_E);
p_A activates the transcription of p_B into 0.5*mRNA_C & 0.5*mRNA_D;
p_A activates the transcription of g_B into mRNA_C & mRNA_D;
p_A activates p_B;
p_A activated the translation of g_B into 0.7*p_C, 0.2*p_D & 0.1*p_E;
p_F activating the translation of mRNA_B into 0.7*p_C, 0.2*p_D & 0.1*p_E;
? #what is this?# (p_A, p_B or p_C) activate the expression of (p_D & p_E);
(p_A & p_B) & p_C activate the expression of p_D & p_E;
    ==> (p_A + p_B) activate the expression of p_D;
        p_C activate the expression of p_D;
        (p_A + p_B) activate the expression of p_E;
        p_C activate the expression of p_E;
(p_A & p_B & p_C), (p_A & p_D & p_E) activate the expression of (p_D & p_E);
    ==> (p_A & p_B & p_C) together activate the expression of (p_D & p_E);
        (p_A & p_D & p_E) together activate the expression of (p_D & p_E);
?# do we need "or"?


// uptake/secrete
the cell uptook m_A, m_B, m_C;
the cell secretes p_D through p_E;

// translocate
p_A, p_B, m_C are translocated into nucleus;
p_A translocates out of nucleus;

// bind/disassociate
p_A, p_B & p_C bind to form m_D;
p_A, p_B & p_C bind;
p_A, p_B & p_C complex to form m_D;
m_A_B_C_D unbound;
m_A_B_C_D disassociate into m_A_B, m_C & m_D;

// splicing
p_A splicing into p_B & p_C;
p_A spliced into 0.1*B, 0.8*C and 0.1*D;

// phosphorylate: here, parentheses can only be used to denote that those enzymes work together.
consecutive phosphorylation sequence p_A, p_B & p_C;
A phosphorylates m_B at site S54;
p_A, p_B & p_C phosphorylate p_D & p_E;
[] dephosphorylated p_A, p_B & p_C;
A, B & C catalyze the reversible conversion of 2*D, E and 2.5*F into 2*G, H, 1.5*I;
    ==>means (2*D, E and 2.5*F) <==> (2*G, H, 1.5*I), where A, B & C are isoenzymes;
(A, B & C) catalyse the conversion of D, E and F into 2*G, H, 1.5*I;
    ==>means (2*D, E and 2.5*F) == (2*G, H, 1.5*I) which need three enzymes (A,B,C) to happen;
(A, B & C) & E catalyse the conversion of D, E and F into 2*G, H, 1.5*I;
    ==> means (2*D, E and 2.5*F) == (2*G, H, 1.5*I) which need three enzymes (A,B,C) to happen or can happen with enzyme E;

// symbol conversion: here, symbols inside parentheses is matched one by one.
g_ equals to TAGgene;
m_ is TAGprotein;
(M_, p_) = (TAGmetabolite, TAGprotein);
(_pho, _ubi, _ace) are (_PHOS, _UBI, _ACE);
(_ext, _nuc, _cyt) equal to (_EXTRA, _NUC, _CYT);
